name: "Checkout"
description: "Clones a fresh or updates an existing repo"
inputs:
  token:
    required: true
    description: "The Personal Access Token for accessing the repository"
runs:
  using: "composite"
  steps:
    - name: Repo URL
      id: vars
      run: |
        REPO_URL=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY.git
        echo "Repo URL: $REPO_URL"
        echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT
      shell: bash

    - name: Configure GitHub credentials
      run: echo "https://x-access-token:${{ inputs.token }}@github.com" > ~/.git-credentials
      shell: bash

    - name: Check if .git directory exists
      id: check-git
      run: |
        # Set the output variable "git_exists" based on the presence of the .git directory
        if [ -d ".git" ]; then
          echo "::set-output name=git_exists::true"
        else
          echo "::set-output name=git_exists::false"
        fi
      shell: bash

    - name: Clone repository if not present
      if: steps.check-git.outputs.git_exists == 'false'
      run: |
        # Clone the repository with a shallow history and without submodules
        git clone --depth 1 --no-single-branch ${{ steps.vars.outputs.repo_url }} .
        # Fetch and checkout the specific commit
        git fetch origin ${{ github.sha }}
        git checkout ${{ github.sha }}
        # Initialize and update submodules to the specific commit
        git submodule update --init --recursive
      shell: bash

    - name: Update repository if present
      if: steps.check-git.outputs.git_exists == 'true'
      run: |
        # Discard local changes in the main project
        ###git rm --cached -r . || true  # necessary but may fail when no files
        git reset --hard HEAD
        git clean -fd
        # Discard local changes in all submodules
        git submodule foreach --recursive git reset --hard HEAD
        git submodule foreach --recursive git clean -fd
        # Get rid of wrong credentials
        git remote set-url origin ${{ steps.vars.outputs.repo_url }}
        # Fetch and checkout the specific commit
        git fetch origin ${{ github.sha }}
        git checkout ${{ github.sha }}
        # Deinitialize, update, and reinitialize submodules
        git submodule deinit --force --all
        git submodule sync --recursive
        git submodule update --init --recursive
      shell: bash

    - name: Show status
      run: git status
      shell: bash
